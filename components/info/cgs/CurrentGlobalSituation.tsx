import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { useState, useEffect } from 'react';
import { ChartData } from 'chart.js';

// Registering elements for Chart.js
ChartJS.register(ArcElement, Tooltip, Legend);

interface DataPoint {
  label: string;
  description: string;
  percentage: number;
  videoSrc: string; // Background video URL
}

const SDGCarousel: React.FC = () => {
  const [currentIndex, setCurrentIndex] = useState<number>(0);

  const dataPoints: DataPoint[] = [
    {
      label: 'Lack of Access to Drinking Water',
      description: '2.2 billion people still lack access to safely managed drinking water, exposing them to health risks and waterborne diseases.',
      percentage: 28,
      videoSrc: '/water_fountain.mp4', // Video for this slide
    },
    {
      label: 'Lack of Sanitation',
      description: '3.5 billion people globally do not have access to safely managed sanitation, leading to poor hygiene and the spread of infectious diseases.',
      percentage: 44,
      videoSrc: '/junkyard.mp4', // Video for this slide
    },
    {
      label: 'Untreated Wastewater',
      description: '80% of wastewater generated by society flows back into the environment without being treated, polluting rivers, lakes, and oceans.',
      percentage: 80,
      videoSrc: 'wastewater.mp4',
    },
    {
      label: 'Lack of Handwashing Facilities',
      description: '2.2 billion people lack basic handwashing facilities with soap and water at home, significantly increasing the spread of diseases like COVID-19.',
      percentage: 28,
      videoSrc: '/videos/handwashing-video.mp4',
    },
    {
      label: 'Water Shortages by 2050',
      description: 'By 2050, it is projected that 1 in 4 people will live in a country affected by chronic or recurring water shortages, drastically impacting livelihoods and agriculture.',
      percentage: 25,
      videoSrc: '/videos/water-shortage-video.mp4',
    },
  ];

  const chartData = (percentage: number): ChartData<'pie', number[], string> => ({
    labels: ['Affected', 'Unaffected'],
    datasets: [
      {
        label: 'Population',
        data: [percentage, 100 - percentage],
        backgroundColor: ['#F87171', '#E5E7EB'],
      },
    ],
  });

  // Preload videos using <link rel="preload">
  useEffect(() => {
    const head = document.querySelector('head');
    dataPoints.forEach((dataPoint) => {
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'video';
      link.href = dataPoint.videoSrc;
      head?.appendChild(link);
    });
  }, []);

  // Next Slide
  const nextSlide = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % dataPoints.length);
  };

  // Previous Slide
  const prevSlide = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? dataPoints.length - 1 : prevIndex - 1
    );
  };

  return (
    <section className="relative w-screen h-screen flex justify-center items-center">
      {/* Overlay for darkening the video */}
      <div className="absolute top-0 left-0 w-full h-full rounded-xl"></div>
      {/* Content */}
      <div className="relative w-full max-w-4xl pt-10 pb-10 bg-white bg-opacity-90 rounded-lg shadow-lg text-center flex flex-col items-center justify-center">
        {/* Background Video */}
        <video
          className="absolute top-0 left-0 w-full h-full object-cover z-0"
          src={dataPoints[currentIndex].videoSrc}
          autoPlay
          loop
          muted
        />
        {/* Overlay */}
        <div className="absolute top-0 left-0 w-full h-full bg-black opacity-50 z-5"></div>

        {/* Video content */}
        <div className='bg-white z-10 justify-center flex flex-col items-center p-4 rounded-xl opacity-90'>
          <h2 className="text-2xl font-bold mb-4 text-black z-10">
            {dataPoints[currentIndex].label}
          </h2>
          <div className="w-[300px] h-[300px] z-10">
            <Pie data={chartData(dataPoints[currentIndex].percentage)} />
          </div>
          <p className="mt-4 text-black max-w-md z-10">{dataPoints[currentIndex].description}</p>

          <div className="flex justify-between items-center mt-6 w-full max-w-xs z-10">
            <button
              onClick={prevSlide}
              className="bg-blue-500 text-white px-4 py-2 rounded-md z-10"
            >
              Previous
            </button>
            <button
              onClick={nextSlide}
              className="bg-blue-500 text-white px-4 py-2 rounded-md z-10"
            >
              Next
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default SDGCarousel;
